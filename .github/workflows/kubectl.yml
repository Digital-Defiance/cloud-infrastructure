name: Run kubectl
on:
  workflow_dispatch:
    
    

jobs:

  start-runner: 
    runs-on: ubuntu-latest
    environment: production
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
      db_username: ${{ steps.get-aws-info.outputs.db_username }}
      db_endpoint: ${{ steps.get-aws-info.outputs.db_endpoint }}
    steps:
    - uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - 
      name: Checkout
      id: checkout
      uses: actions/checkout@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-south-1

    - name: 'Setup jq'
      uses: dcarbone/install-jq-action@v2
    
    - run: terraform init
      working-directory: .github/aws

    - name: Terraform apply (does not create, change or destroy resources)
      run: terraform apply -auto-approve
      working-directory: .github/aws

    - name: Parse output to get ami
      working-directory: .github/aws
      run: |
        TERRAFORM_OUTPUT=$(terraform output -json) 

        echo "AMI=$( "$TERRAFORM_OUTPUT" | jq .ami.value | tr -d '"' )" >> $GITHUB_ENV
        echo "SECURITY_GROUP_ID=$( "$TERRAFORM_OUTPUT" | jq .security_group_id.value | tr -d '"' )" >> $GITHUB_ENV
        echo "SUBNET_ID=$("$TERRAFORM_OUTPUT" | jq .subnet_ids.value.ids[0] | tr -d '"' )" >> $GITHUB_ENV

        echo "db_master_username=$( "$TERRAFORM_OUTPUT" | jq .db_instance_master_username.value | tr -d '"' )" >> $GITHUB_OUTPUT
        echo "db_instance_endpoint=$( "$TERRAFORM_OUTPUT" | jq .db_instance_endpoint.value | tr -d '"' )" >> $GITHUB_OUTPUT
        

    - name: Start EC2 runner
      id: start-ec2-runner
      if: ${{ inputs.machine != 'local' }}
      uses: digital-defiance/ec2-github-runner@feature/add-storage-option
      with:
        mode: start
        root-volume-size: 250
        pre-runner-script: |  # sudo yum update -y && sudo yum install docker git libicu -y
            sudo apt update -y
            sudo apt -y install docker.io
            sudo service docker start
            sudo usermod -a -G docker ubuntu
            sudo chmod 666 /var/run/docker.sock
            docker version
# sudo systemctl enable docker
# sudo systemctl start docker
        ec2-instance-type: t3.small
        subnet-id: ${{ env.SUBNET_ID }}
        github-token: ${{ secrets.GH_PAT }}
        ec2-image-id: ${{ env.AMI }}
        security-group-id: ${{ env.SECURITY_GROUP_ID }}

          
  kubectl:
    name: Execute kubectl commands
    environment: production
    container:
      image: ghcr.io/digital-defiance/cloud-infrastructure:latest
    needs:
      - start-runner
    runs-on: ${{ needs.start-runner.outputs.label }}
    steps:
      - 
        name: Checkout
        id: checkout
        uses: actions/checkout@v1

      - 
        name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-south-1

      - 
        name: Configure EKS 
        run: aws eks update-kubeconfig --region eu-south-1 --name cloud-dev-infra

      - 
        run: kubectl get nodes
      
      -
        working-directory: ./k8s
        name: Create namespace "coder"
        run: kubectl apply -f manifest.yml

      - 
        working-directory: ./k8s
        run: |
          kubectl create secret generic coder-db-url -n coder \
            --from-literal=url="postgres://${{ needs.start-runner.outputs.db_username  }}:${{ secrets.db_password }}@${{ needs.start-runner.outputs.db_endpoint }}/?sslmode=disable" 
               
      - 
        run: helm repo add coder-v2 https://helm.coder.com/v2

      - 
        working-directory: ./k8s
        run: |
          helm upgrade --install coder coder-v2/coder \
              --namespace coder \
              --values values.yml \
              --version 2.13.5  

      - 
        run: kubectl get svc -n coder

  stop-runner:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: "Deprovision infrastructure"
    environment: production
    needs:
      - start-runner
      - kubectl
    steps:
  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-south-1
  
      - name: Stop EC2 runner
        uses: digital-defiance/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.GH_PAT }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
