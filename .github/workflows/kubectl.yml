name: Deploy coder
on:
  workflow_dispatch:
    
env:
  VAULT_PATH: op://digital-defiance-cloud-infrastructure-prod
  PROJECT_ENV: digital-defiance-cloud-infrastructure-prod
 
jobs:

  start-runner:
    runs-on: ubuntu-latest
    environment: production
    container:
      image: ghcr.io/digital-defiance/cloud-infrastructure:latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
      db_username: ${{ steps.get-aws-info.outputs.db_master_username }}
      db_endpoint: ${{ steps.get-aws-info.outputs.db_instance_endpoint }}

    steps:

    - 
      name: Checkout
      id: checkout
      uses: actions/checkout@v1

    -
      name: Install Dagger
      run: curl -fsSL https://dl.dagger.io/dagger/install.sh | BIN_DIR=$HOME/.local/bin sh
    
    -
      name: Run Dagger Engine
      id: get-aws-info
      run:
        eval $(dagger call run-instance --op-token=cmd:"echo '${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}'") 
    
    -
      name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-south-1

    -
      name: Start EC2 runner
      id: start-ec2-runner
      uses: digital-defiance/ec2-github-runner@feature/add-storage-option
      with:
        mode: start
        root-volume-size: 80
        pre-runner-script: |  
            sudo apt update -y
            sudo apt -y install docker.io
            sudo service docker start
            sudo usermod -a -G docker ubuntu
            sudo chmod 666 /var/run/docker.sock
            docker version
        ec2-instance-type: t3.small
        github-token: ${{ secrets.GH_PAT }}
        subnet-id: ${{ steps.get-aws-info.outputs.subnet_id  }}
        ec2-image-id: ${{ steps.get-aws-info.outputs.ami }}
        security-group-id: ${{ steps.get-aws-info.outputs.security_group_id  }}

          
  kubectl:
    name: Execute kubectl commands
    environment: production
    container:
      image: ghcr.io/digital-defiance/cloud-infrastructure:latest
    needs:
      - start-runner
    runs-on: ${{ needs.start-runner.outputs.label }}
    steps:

      - 
        name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-south-1

      - 
        name: Configure EKS 
        run: aws eks update-kubeconfig --region eu-south-1 --name cloud-dev-infra

      - 
        run: kubectl get nodes
      
      - 
        name: Checkout
        id: checkout
        uses: actions/checkout@v1


      -
        working-directory: ./k8s
        name: Apply manifest.yml
        run: kubectl apply -f manifest.yml

      - 
        run: helm repo add coder-v2 https://helm.coder.com/v2

      - 
        working-directory: ./k8s
        run: |
          helm upgrade --install coder coder-v2/coder \
              --namespace coder \
              --values values.yml \
              --version 2.13.5  


  stop-runner:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: "Deprovision infrastructure"
    environment: production
    needs:
      - start-runner
      - kubectl
    steps:
  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-south-1
  
      - name: Stop EC2 runner
        uses: digital-defiance/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.GH_PAT }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
